
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

int64 spec_abs1(int32 a)
behavior default:
  assigns \nothing;
  ensures (_C_7 : ((\result :> integer) >= 0));
behavior positive:
  assumes (a > (0 :> int32));
  ensures (_C_8 : (\result == (\at(a,Old) :> int64)));
behavior zero:
  assumes (a == (0 :> int32));
  ensures (_C_9 : ((_C_10 : ((\result :> integer) == 0)) &&
                    (_C_11 : (\result == (\at(a,Old) :> int64)))));
behavior negative:
  assumes (a < (0 :> int32));
  ensures (_C_12 : ((\result :> integer) == (- (\at(a,Old) :> integer))));
{  
   (check (disjoint_behaviors : (! ((a == (0 :> int32)) &&
                                     (a < (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((a > (0 :> int32)) &&
                                     (a == (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((a > (0 :> int32)) && (a < (0 :> int32))))));
   
   (check (complete_behaviors : ((a < (0 :> int32)) ||
                                  ((a == (0 :> int32)) || (a > (0 :> int32))))));
   
   (var int64 abs);
   
   {  (_C_2 : (abs = (_C_1 : (a :> int64))));
      (if (_C_6 : (a < (0 :> int32))) then (_C_5 : (abs = (_C_4 : ((_C_3 : 
                                                                   (- abs)) :> int64)))) else ());
      
      (return abs)
   }
}
