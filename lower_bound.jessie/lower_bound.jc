
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

uint32 lower_bound(intP[..] a, uint32 n_1, int32 val)
  requires ((_C_35 : \at((if (\at(0,Here) <=
                               \at(((n_1 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(a,Here)) >=
                              \at(((n_1 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp1;
                             (((\at(0,Here) <= __framac_tmp1) &&
                                (__framac_tmp1 <=
                                  \at(((n_1 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             (_C_36 : (\forall integer i_4;
                        (\forall integer j_0;
                          ((((0 <= i_4) && (i_4 < j_0)) &&
                             (j_0 < (n_1 :> integer))) ==>
                            ((a + i_4).intM <= (a + j_0).intM))))));
behavior default:
  assigns \nothing;
  ensures (_C_28 : (((_C_30 : (0 <= (\result :> integer))) &&
                      (_C_31 : (\result <= \at(n_1,Old)))) &&
                     ((_C_33 : (\forall integer k_1;
                                 (((0 <= k_1) &&
                                    (k_1 < (\result :> integer))) ==>
                                   ((\at(a,Old) + k_1).intM < \at(val,Old))))) &&
                       (_C_34 : (\forall integer k_2;
                                  ((((\result :> integer) <= k_2) &&
                                     (k_2 < (\at(n_1,Old) :> integer))) ==>
                                    (\at(val,Old) <= (\at(a,Old) + k_2).intM)))))));
{  
   (var uint32 left);
   
   (var uint32 right);
   
   (var uint32 middle);
   
   {  (_C_1 : (left = (0 :> uint32)));
      (_C_2 : (right = n_1));
      (_C_3 : (middle = (0 :> uint32)));
      
      loop 
      behavior default:
        invariant (_C_7 : (((_C_9 : (0 <= (left :> integer))) &&
                             (_C_10 : (left <= right))) &&
                            (_C_11 : (right <= n_1))));
      behavior default:
        invariant (_C_6 : (\forall integer i_2;
                            (((0 <= i_2) && (i_2 < (left :> integer))) ==>
                              ((a + i_2).intM < val))));
      behavior default:
        invariant (_C_5 : (\forall integer i_3;
                            ((((right :> integer) <= i_3) &&
                               (i_3 < (n_1 :> integer))) ==>
                              (val <= (a + i_3).intM))));
      behavior default:
        
        assigns middle,
        left,
        right;
      variant (_C_4 : ((right :> integer) - (left :> integer)));
      while (true)
      {  
         {  (if (_C_12 : (left < right)) then () else 
            (goto while_0_break));
            
            {  (_C_19 : (middle = (_C_18 : ((_C_17 : (left +
                                                       (_C_16 : ((_C_15 : 
                                                                 ((_C_14 : (
                                                                  (_C_13 : 
                                                                  (right -
                                                                    left)) :> uint32)) /
                                                                   (2 :> uint32))) :> uint32)))) :> uint32))));
               (if (_C_27 : ((_C_26 : (_C_25 : (a + middle)).intM) < val)) then 
               {  
                  {  
                     (assert for default: (_C_21 : (jessie : (\forall integer i_1;
                                                               (((0 <= i_1) &&
                                                                  (i_1 <
                                                                    ((middle :> integer) +
                                                                    1))) ==>
                                                                 ((a + i_1).intM <
                                                                   val))))));
                     ()
                  };
                  (_C_24 : (left = (_C_23 : ((_C_22 : (middle +
                                                        (1 :> uint32))) :> uint32))))
               } else (_C_20 : (right = middle)))
            }
         }
      };
      (while_0_break : ());
      
      (return left)
   }
}

uint32 lower_bound_raw(intP[..] a_0, uint32 n_2, int32 val_0)
  requires ((_C_58 : \at((if (\at(0,Here) <=
                               \at(((n_2 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(a_0,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(a_0,Here)) >=
                              \at(((n_2 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp2;
                             (((\at(0,Here) <= __framac_tmp2) &&
                                (__framac_tmp2 <=
                                  \at(((n_2 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             (_C_59 : (\forall integer i_5;
                        (\forall integer j_3;
                          ((((0 <= i_5) && (i_5 < j_3)) &&
                             (j_3 < (n_2 :> integer))) ==>
                            ((a_0 + i_5).intM <= (a_0 + j_3).intM))))));
behavior default:
  assigns \nothing;
  ensures (_C_51 : (((_C_53 : (0 <= (\result :> integer))) &&
                      (_C_54 : (\result <= \at(n_2,Old)))) &&
                     ((_C_56 : (\forall integer k_3;
                                 (((0 <= k_3) &&
                                    (k_3 < (\result :> integer))) ==>
                                   ((\at(a_0,Old) + k_3).intM <
                                     \at(val_0,Old))))) &&
                       (_C_57 : (\forall integer k_4;
                                  ((((\result :> integer) <= k_4) &&
                                     (k_4 < (\at(n_2,Old) :> integer))) ==>
                                    (\at(val_0,Old) <=
                                      (\at(a_0,Old) + k_4).intM)))))));
{  
   (var uint32 i);
   
   {  (_C_37 : (i = (0 :> uint32)));
      
      loop 
      behavior default:
        invariant (_C_41 : ((_C_42 : (0 <= (i :> integer))) &&
                             (_C_43 : (i <= n_2))));
      behavior default:
        invariant (_C_40 : (\forall integer j_1;
                             (((0 <= j_1) && (j_1 < (i :> integer))) ==>
                               ((a_0 + j_1).intM < val_0))));
      behavior default:
        invariant (_C_39 : (\forall integer j_2;
                             ((((i :> integer) <= j_2) &&
                                (j_2 < (n_2 :> integer))) ==>
                               ((a_0 + j_2).intM >=
                                 (a_0 + (i :> integer)).intM))));
      behavior default:
        
        assigns i;
      variant (_C_38 : ((n_2 :> integer) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_44 : (i < n_2)) then () else 
            (goto while_0_break));
            
            {  (if (_C_47 : ((_C_46 : (_C_45 : (a_0 + i)).intM) >= val_0)) then 
               (goto while_0_break) else ())
            };
            (_C_50 : (i = (_C_49 : ((_C_48 : (i + (1 :> uint32))) :> uint32))))
         }
      };
      (while_0_break : ());
      
      (return i)
   }
}
