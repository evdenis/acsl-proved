
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

uint32 distance_abs(int32 a, int32 b)
  requires ((_C_23 : true) &&
             ((_C_24 : ((a :> integer) > (- 2147483648))) &&
               (_C_25 : ((b :> integer) > (- 2147483648)))));
behavior default:
  assigns \nothing;
  ensures (_C_22 : ((\result :> integer) ==
                     \integer_abs((\integer_abs((\at(a,Old) :> integer)) -
                                    \integer_abs((\at(b,Old) :> integer))))));
{  
   (var uint32 ua);
   
   (var int32 tmp);
   
   (var uint32 ub);
   
   (var int32 tmp_0);
   
   (var uint32 tmp_1);
   
   {  (if (_C_5 : (a < (0 :> int32))) then (_C_4 : (tmp = (_C_3 : ((_C_2 : 
                                                                   (- a)) :> int32)))) else 
      (_C_1 : (tmp = a)));
      (_C_7 : (ua = (_C_6 : (tmp :> uint32))));
      (if (_C_12 : (b < (0 :> int32))) then (_C_11 : (tmp_0 = (_C_10 : (
                                                              (_C_9 : 
                                                              (- b)) :> int32)))) else 
      (_C_8 : (tmp_0 = b)));
      (_C_14 : (ub = (_C_13 : (tmp_0 :> uint32))));
      (if (_C_21 : (ua > ub)) then (_C_20 : (tmp_1 = (_C_19 : ((_C_18 : 
                                                               (ua -
                                                                 ub)) :> uint32)))) else 
      (_C_17 : (tmp_1 = (_C_16 : ((_C_15 : (ub - ua)) :> uint32)))));
      
      (return tmp_1)
   }
}
