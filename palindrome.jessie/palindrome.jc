
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

int32 palindrome(intP[..] a, uint32 size_2)
  requires (_C_34 : \at((if (\at(0,Here) <=
                              \at(((size_2 :> integer) - 1),Here)) then 
                        (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                           (\offset_max(\at(a,Here)) >=
                             \at(((size_2 :> integer) - 1),Here))) &&
                          (\forall integer __framac_tmp1;
                            (((\at(0,Here) <= __framac_tmp1) &&
                               (__framac_tmp1 <=
                                 \at(((size_2 :> integer) - 1),Here))) ==>
                              true))) else true),Here));
behavior default:
  assigns \nothing;
  ensures (_C_25 : ((\result == (0 :> int32)) || (\result == (1 :> int32))));
behavior nil:
  assumes ((size_2 :> integer) == 0);
  ensures (_C_26 : (\result == (1 :> int32)));
behavior palindrome:
  assumes (((size_2 :> integer) > 0) &&
            (\forall integer i_2;
              (((0 <= i_2) && (i_2 < (size_2 :> integer))) ==>
                ((a + i_2).intM ==
                  (a + (((size_2 :> integer) - i_2) - 1)).intM))));
  ensures (_C_27 : (\result == (1 :> int32)));
behavior non_palindrome:
  assumes (((size_2 :> integer) > 0) &&
            (\exists integer i_1;
              (((0 <= i_1) && (i_1 < (size_2 :> integer))) &&
                ((a + i_1).intM !=
                  (a + (((size_2 :> integer) - i_1) - 1)).intM))));
  ensures (_C_28 : (\result == (0 :> int32)));
{  
   (check (disjoint_behaviors : (! ((((size_2 :> integer) > 0) &&
                                      (\forall integer i_2;
                                        (((0 <= i_2) &&
                                           (i_2 < (size_2 :> integer))) ==>
                                          ((a + i_2).intM ==
                                            (a +
                                              (((size_2 :> integer) - i_2) -
                                                1)).intM)))) &&
                                     (((size_2 :> integer) > 0) &&
                                       (\exists integer i_1;
                                         (((0 <= i_1) &&
                                            (i_1 < (size_2 :> integer))) &&
                                           ((a + i_1).intM !=
                                             (a +
                                               (((size_2 :> integer) - i_1) -
                                                 1)).intM))))))));
   
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 0) &&
                                     (((size_2 :> integer) > 0) &&
                                       (\forall integer i_2;
                                         (((0 <= i_2) &&
                                            (i_2 < (size_2 :> integer))) ==>
                                           ((a + i_2).intM ==
                                             (a +
                                               (((size_2 :> integer) - i_2) -
                                                 1)).intM))))))));
   
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 0) &&
                                     (((size_2 :> integer) > 0) &&
                                       (\exists integer i_1;
                                         (((0 <= i_1) &&
                                            (i_1 < (size_2 :> integer))) &&
                                           ((a + i_1).intM !=
                                             (a +
                                               (((size_2 :> integer) - i_1) -
                                                 1)).intM))))))));
   
   (check (complete_behaviors : ((((size_2 :> integer) > 0) &&
                                   (\exists integer i_1;
                                     (((0 <= i_1) &&
                                        (i_1 < (size_2 :> integer))) &&
                                       ((a + i_1).intM !=
                                         (a +
                                           (((size_2 :> integer) - i_1) - 1)).intM)))) ||
                                  ((((size_2 :> integer) > 0) &&
                                     (\forall integer i_2;
                                       (((0 <= i_2) &&
                                          (i_2 < (size_2 :> integer))) ==>
                                         ((a + i_2).intM ==
                                           (a +
                                             (((size_2 :> integer) - i_2) -
                                               1)).intM)))) ||
                                    ((size_2 :> integer) == 0)))));
   
   (var int32 res);
   
   (var uint32 i);
   
   {  (_C_1 : (res = (1 :> int32)));
      (_C_2 : (i = (0 :> uint32)));
      
      loop 
      behavior default:
        invariant (_C_6 : ((_C_7 : (0 <= (i :> integer))) &&
                            (_C_8 : ((i :> integer) <=
                                      ((size_2 :> integer) / 2)))));
      behavior default:
        invariant (_C_5 : ((\forall integer j_0;
                             (((0 <= j_0) && (j_0 < (i :> integer))) ==>
                               ((a + j_0).intM ==
                                 (a + (((size_2 :> integer) - j_0) - 1)).intM))) <==>
                            (res == (1 :> int32))));
      behavior default:
        invariant (_C_4 : ((res == (0 :> int32)) || (res == (1 :> int32))));
      behavior default:
        
        assigns res;
      variant (_C_3 : ((size_2 :> integer) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_11 : (i <
                           (_C_10 : ((_C_9 : (size_2 / (2 :> uint32))) :> uint32)))) then () else 
            (goto while_0_break));
            
            {  (if (_C_21 : ((_C_20 : (_C_19 : (a + i)).intM) !=
                              (_C_18 : (_C_17 : (a +
                                                  (_C_16 : ((_C_15 : 
                                                            ((_C_14 : (
                                                             (_C_13 : 
                                                             (size_2 -
                                                               i)) :> uint32)) -
                                                              (1 :> uint32))) :> uint32)))).intM))) then 
               {  (_C_12 : (res = (0 :> int32)));
                  
                  (goto while_0_break)
               } else ())
            };
            (_C_24 : (i = (_C_23 : ((_C_22 : (i + (1 :> uint32))) :> uint32))))
         }
      };
      (while_0_break : ());
      
      (return res)
   }
}
