
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

unit reverse(intP[..] a, intP[..] res, int32 size_2)
  requires ((_C_23 : (size_2 >= (0 :> int32))) &&
             ((_C_24 : \at((if (\at(0,Here) <=
                                 \at(((size_2 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(a,Here)) >=
                                \at(((size_2 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp1;
                               (((\at(0,Here) <= __framac_tmp1) &&
                                  (__framac_tmp1 <=
                                    \at(((size_2 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               (_C_25 : \at((if (\at(0,Here) <=
                                  \at(((size_2 :> integer) - 1),Here)) then 
                            (((\offset_min(\at(res,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(res,Here)) >=
                                 \at(((size_2 :> integer) - 1),Here))) &&
                              (\forall integer __framac_tmp2;
                                (((\at(0,Here) <= __framac_tmp2) &&
                                   (__framac_tmp2 <=
                                     \at(((size_2 :> integer) - 1),Here))) ==>
                                  true))) else true),Here))));
behavior default:
  assigns (res + [0..((size_2 :> integer) - 1)]).intM;
  ensures (_C_22 : (\forall integer i_1;
                     (((0 <= i_1) && (i_1 < (\at(size_2,Old) :> integer))) ==>
                       ((\at(res,Old) + i_1).intM ==
                         (\at(a,Old) +
                           (((\at(size_2,Old) :> integer) - i_1) - 1)).intM))));
{  
   (var int32 i);
   
   {  (_C_3 : (i = (_C_2 : ((_C_1 : (size_2 - (1 :> int32))) :> int32))));
      
      loop 
      behavior default:
        invariant (_C_6 : ((_C_7 : ((- 1) <= (i :> integer))) &&
                            (_C_8 : (i < size_2))));
      behavior default:
        invariant (_C_5 : (\forall integer j_0;
                            ((((i :> integer) < j_0) &&
                               (j_0 < (size_2 :> integer))) ==>
                              ((res + j_0).intM ==
                                (a + (((size_2 :> integer) - j_0) - 1)).intM))));
      behavior default:
        
        assigns i,
        (res + [0..((size_2 :> integer) - 1)]).intM;
      variant (_C_4 : i);
      while (true)
      {  
         {  (if (_C_9 : (i >= (0 :> int32))) then () else 
            (goto while_0_break));
            (_C_18 : ((_C_17 : (_C_16 : (res + i)).intM) = (_C_15 : (_C_14 : 
                                                                    (a +
                                                                    (_C_13 : (
                                                                    (_C_12 : 
                                                                    ((_C_11 : (
                                                                    (_C_10 : 
                                                                    (size_2 -
                                                                    i)) :> int32)) -
                                                                    (1 :> int32))) :> int32)))).intM)));
            (_C_21 : (i = (_C_20 : ((_C_19 : (i - (1 :> int32))) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
