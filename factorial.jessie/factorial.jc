
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

axiomatic Factorial {

  logic integer factorial(integer i_1)
   
  axiom nil :
  (_C_1 : (factorial(0) == 1))
   
  axiom step :
  (_C_2 : (\forall integer i_2;
            ((i_2 >= 0) ==> (factorial(i_2) == (factorial((i_2 - 1)) * i_2)))))
   
  lemma non_negative :
  (_C_3 : (\forall integer i_3;
            ((i_3 >= 0) ==> (factorial(i_3) > 0))))
  
}

uint64 factorial(uint32 i)
  requires (_C_17 : (factorial((i :> integer)) <= 18446744073709551615UL));
behavior default:
  assigns \nothing;
  ensures (_C_16 : ((\result :> integer) ==
                     factorial((\at(i,Old) :> integer))));
{  
   (var uint64 f);
   
   (var uint32 tmp);
   
   {  (_C_4 : (f = (1 :> uint64)));
      
      loop 
      behavior default:
        invariant (_C_6 : (0 <= (i :> integer)));
      behavior default:
        
        assigns f,
        i;
      variant (_C_5 : i);
      while (true)
      {  
         {  (if (_C_7 : ((i :> uint32) != (0 :> uint32))) then () else 
            (goto while_0_break));
            
            {  
               {  (_C_8 : (tmp = i));
                  (_C_11 : (i = (_C_10 : ((_C_9 : (i - (1 :> uint32))) :> uint32))));
                  (_C_15 : (f = (_C_14 : ((_C_13 : (f *
                                                     (_C_12 : (tmp :> uint64)))) :> uint64))))
               }
            }
         }
      };
      (while_0_break : ());
      
      (return f)
   }
}
