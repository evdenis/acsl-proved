
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag int_xP = {
  intP[..] int_xM: 64;
}

type int_xP = [int_xP]

unit max_max(intP[..] a, uint32 size_2, int_xP[..] max1, int_xP[..] max2)
  requires ((_C_87 : \at((if (\at(0,Here) <=
                               \at(((size_2 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(a,Here)) >=
                              \at(((size_2 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp3;
                             (((\at(0,Here) <= __framac_tmp3) &&
                                (__framac_tmp3 <=
                                  \at(((size_2 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             (_C_88 : ((_C_89 : \at((((\offset_min(\at(max1,Here)) <=
                                        \at(0,Here)) &&
                                       (\offset_max(\at(max1,Here)) >=
                                         \at(0,Here))) &&
                                      true),Here)) &&
                        (_C_90 : \at((((\offset_min(\at(max2,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(max2,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here)))));
behavior default:
  ensures true;
behavior zero_size:
  assumes ((size_2 :> integer) == 0);
  assigns \nothing;
  ensures (_C_63 : ((_C_64 : (\at(max1,Old) == \at(max1,Old))) &&
                     (_C_65 : (\at(max2,Old) == \at(max2,Old)))));
behavior one_size:
  assumes ((size_2 :> integer) == 1);
  assigns max1.int_xM,
  max2.int_xM;
  ensures (_C_66 : ((_C_67 : (\at(max1,Old).int_xM.intM ==
                               (\at(a,Old) + 0).intM)) &&
                     ((_C_69 : (\at(max1,Old).int_xM.intM ==
                                 \at(max2,Old).int_xM.intM)) &&
                       (_C_70 : (\at(max1,Old).int_xM ==
                                  \at(max2,Old).int_xM)))));
behavior size:
  assumes ((size_2 :> integer) > 1);
  assigns max1.int_xM,
  max2.int_xM;
  ensures (_C_71 : (((_C_73 : \at(\at((((\offset_min(\at(max1,Old)) <=
                                          \at(0,Old)) &&
                                         (\offset_max(\at(max1,Old)) >=
                                           \at(0,Old))) &&
                                        true),Here),Old)) &&
                      (_C_74 : \at(\at((((\offset_min(\at(max2,Old)) <=
                                           \at(0,Old)) &&
                                          (\offset_max(\at(max2,Old)) >=
                                            \at(0,Old))) &&
                                         true),Here),Old))) &&
                     ((_C_76 : (\exists integer i_1;
                                 (\exists integer j_5;
                                   (((((((0 <= i_1) &&
                                          (i_1 <
                                            (\at(size_2,Old) :> integer))) &&
                                         (0 <= j_5)) &&
                                        (j_5 < (\at(size_2,Old) :> integer))) &&
                                       (i_1 != j_5)) &&
                                      ((\at(a,Old) + i_1) ==
                                        \at(max1,Old).int_xM)) &&
                                     ((\at(a,Old) + j_5) ==
                                       \at(max2,Old).int_xM))))) &&
                       ((_C_78 : (\at(max1,Old).int_xM.intM >=
                                   \at(max2,Old).int_xM.intM)) &&
                         ((_C_80 : (\forall integer i_2;
                                     (((0 <= i_2) &&
                                        (i_2 < (\at(size_2,Old) :> integer))) ==>
                                       ((\at(a,Old) + i_2).intM <=
                                         \at(max1,Old).int_xM.intM)))) &&
                           ((_C_82 : (\exists integer i_3;
                                       ((((0 <= i_3) &&
                                           (i_3 <
                                             (\at(size_2,Old) :> integer))) &&
                                          ((\at(a,Old) + i_3).intM >=
                                            \at(max2,Old).int_xM.intM)) &&
                                         ((\at(a,Old) + i_3).intM ==
                                           \at(max1,Old).int_xM.intM)))) &&
                             (_C_83 : (! (\exists integer i_4;
                                           (\exists integer j_6;
                                             ((((((((0 <= i_4) &&
                                                     (i_4 <
                                                       (\at(size_2,Old) :> integer))) &&
                                                    (0 <= j_6)) &&
                                                   (j_6 <
                                                     (\at(size_2,Old) :> integer))) &&
                                                  (i_4 != j_6)) &&
                                                 ((\at(a,Old) + i_4).intM >
                                                   \at(max2,Old).int_xM.intM)) &&
                                                ((\at(a,Old) + j_6).intM >
                                                  \at(max2,Old).int_xM.intM)) &&
                                               ((\at(a,Old) + i_4).intM >
                                                 (\at(a,Old) + j_6).intM))))))))))));
{  
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 1) &&
                                     ((size_2 :> integer) > 1)))));
   
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 0) &&
                                     ((size_2 :> integer) == 1)))));
   
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 0) &&
                                     ((size_2 :> integer) > 1)))));
   
   (check (complete_behaviors : (((size_2 :> integer) > 1) ||
                                  (((size_2 :> integer) == 1) ||
                                    ((size_2 :> integer) == 0)))));
   
   (var uint32 i);
   
   (var uint32 x);
   
   (var uint32 y);
   
   {  (if (_C_62 : (size_2 == (1 :> uint32))) then 
      {  (_C_58 : ((_C_57 : max1.int_xM) = (_C_56 : (a + (0 :> int32)))));
         (_C_61 : ((_C_60 : max2.int_xM) = (_C_59 : (a + (0 :> int32)))))
      } else (if (_C_55 : (size_2 > (1 :> uint32))) then 
             {  
                {  (if (_C_11 : ((_C_10 : (_C_9 : (a + (0 :> int32))).intM) >
                                  (_C_8 : (_C_7 : (a + (1 :> int32))).intM))) then 
                   {  (_C_4 : (x = (0 :> uint32)));
                      (_C_5 : (y = (1 :> uint32)));
                      (if (_C_6 : ((y :> uint32) != (0 :> uint32))) then () else ())
                   } else 
                   {  (_C_1 : (x = (1 :> uint32)));
                      (_C_2 : (y = (0 :> uint32)));
                      (if (_C_3 : ((y :> uint32) != (0 :> uint32))) then () else ())
                   });
                   
                   {  
                      (assert for default: (_C_12 : (jessie : ((a +
                                                                 (x :> integer)).intM >=
                                                                (a +
                                                                  (y :> integer)).intM))));
                      ()
                   };
                   (_C_15 : ((_C_14 : max1.int_xM) = (_C_13 : (a + x))));
                   (_C_18 : ((_C_17 : max2.int_xM) = (_C_16 : (a + y))));
                   
                   {  
                      (assert for default: (_C_19 : (jessie : (max1.int_xM.intM >=
                                                                max2.int_xM.intM))));
                      ()
                   }
                };
                (_C_20 : (i = (2 :> uint32)));
                
                loop 
                behavior default:
                  invariant (_C_29 : ((_C_30 : (2 <= (i :> integer))) &&
                                       (_C_31 : (i <= size_2))));
                behavior default:
                  invariant (_C_28 : (\exists integer j_0;
                                       (((0 <= j_0) &&
                                          (j_0 < (i :> integer))) &&
                                         ((a + j_0) == max1.int_xM))));
                behavior default:
                  invariant (_C_27 : (\exists integer j_1;
                                       (((0 <= j_1) &&
                                          (j_1 < (i :> integer))) &&
                                         ((a + j_1) == max2.int_xM))));
                behavior default:
                  invariant (_C_26 : (max1.int_xM != max2.int_xM));
                behavior default:
                  invariant (_C_25 : (\forall integer j_2;
                                       (((0 <= j_2) &&
                                          (j_2 < (i :> integer))) ==>
                                         ((a + j_2).intM <= max1.int_xM.intM))));
                behavior default:
                  invariant (_C_24 : (max1.int_xM.intM >= max2.int_xM.intM));
                behavior default:
                  invariant (_C_23 : (\exists integer j_3;
                                       ((((0 <= j_3) &&
                                           (j_3 < (i :> integer))) &&
                                          ((a + j_3).intM >=
                                            max2.int_xM.intM)) &&
                                         ((a + j_3).intM == max1.int_xM.intM))));
                behavior default:
                  invariant (_C_22 : (! (\exists integer j_4;
                                          (\exists integer k_1;
                                            ((((((((0 <= j_4) &&
                                                    (j_4 < (i :> integer))) &&
                                                   (0 <= k_1)) &&
                                                  (k_1 < (i :> integer))) &&
                                                 (j_4 != k_1)) &&
                                                ((a + j_4).intM >
                                                  max2.int_xM.intM)) &&
                                               ((a + k_1).intM >
                                                 max2.int_xM.intM)) &&
                                              ((a + k_1).intM >
                                                (a + j_4).intM))))));
                behavior default:
                  
                  assigns max1.int_xM,
                  max2.int_xM;
                variant (_C_21 : ((size_2 :> integer) - (i :> integer)));
                while (true)
                {  
                   {  (if (_C_32 : (i < size_2)) then () else 
                      (goto while_0_break));
                      
                      {  (if (_C_51 : ((_C_50 : (_C_49 : (a + i)).intM) >
                                        (_C_48 : (_C_47 : max1.int_xM).intM))) then 
                         {  (_C_43 : ((_C_42 : max2.int_xM) = (_C_41 : max1.int_xM)));
                            (_C_46 : ((_C_45 : max1.int_xM) = (_C_44 : 
                                                              (a +
                                                                i))))
                         } else (if (_C_40 : ((_C_39 : (_C_38 : (a + i)).intM) >
                                               (_C_37 : (_C_36 : max2.int_xM).intM))) then 
                                (_C_35 : ((_C_34 : max2.int_xM) = (_C_33 : 
                                                                  (a +
                                                                    i)))) else ()))
                      };
                      (_C_54 : (i = (_C_53 : ((_C_52 : (i + (1 :> uint32))) :> uint32))))
                   }
                };
                (while_0_break : ())
             } else ()));
      
      (return ())
   }
}
