
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

int32 spec_sign(int32 x)
behavior default:
  assigns \nothing;
  ensures (_C_6 : (((\result == (0 :> int32)) || (\result == (1 :> int32))) ||
                    ((\result :> integer) == (- 1))));
behavior positive:
  assumes (x > (0 :> int32));
  ensures (_C_7 : (\result == (1 :> int32)));
behavior zero:
  assumes (x == (0 :> int32));
  ensures (_C_8 : (\result == (0 :> int32)));
behavior negative:
  assumes (x < (0 :> int32));
  ensures (_C_9 : ((\result :> integer) == (- 1)));
{  
   (check (disjoint_behaviors : (! ((x == (0 :> int32)) &&
                                     (x < (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((x > (0 :> int32)) &&
                                     (x == (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((x > (0 :> int32)) && (x < (0 :> int32))))));
   
   (check (complete_behaviors : ((x < (0 :> int32)) ||
                                  ((x == (0 :> int32)) || (x > (0 :> int32))))));
   
   (var int32 __retres);
   
   {  (_C_5 : (__retres = (_C_4 : ((_C_3 : ((_C_2 : ((if (x > (0 :> int32)) then 1 else 0) :> int32)) -
                                             (_C_1 : ((if (x < (0 :> int32)) then 1 else 0) :> int32)))) :> int32))));
      
      (return __retres)
   }
}
