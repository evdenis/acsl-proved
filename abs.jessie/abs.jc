
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

int32 spec_abs2(int32 a)
  requires (_C_15 : ((- 2147483648) < (a :> integer)));
behavior default:
  assigns \nothing;
  ensures (_C_6 : (\result >= (0 :> int32)));
behavior positive:
  assumes (a > (0 :> int32));
  ensures (_C_7 : (\result == \at(a,Old)));
behavior zero:
  assumes (a == (0 :> int32));
  ensures (_C_8 : ((_C_9 : (\result == (0 :> int32))) &&
                    (_C_10 : (\result == \at(a,Old)))));
behavior negative:
  assumes (a < (0 :> int32));
  ensures (_C_11 : ((\result :> integer) == (- (\at(a,Old) :> integer))));
{  
   (check (disjoint_behaviors : (! ((a == (0 :> int32)) &&
                                     (a < (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((a > (0 :> int32)) &&
                                     (a == (0 :> int32))))));
   
   (check (disjoint_behaviors : (! ((a > (0 :> int32)) && (a < (0 :> int32))))));
   
   (check (complete_behaviors : ((a < (0 :> int32)) ||
                                  ((a == (0 :> int32)) || (a > (0 :> int32))))));
   
   (var int32 abs);
   
   {  (if (_C_5 : (a < (0 :> int32))) then (_C_4 : (abs = (_C_3 : ((_C_2 : 
                                                                   (- a)) :> int32)))) else 
      (_C_1 : (abs = a)));
      
      (return abs)
   }
}
