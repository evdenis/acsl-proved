
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag int_xP = {
  intP[..] int_xM: 64;
}

type int_xP = [int_xP]

unit max_min(intP[..] a, uint32 size_2, int_xP[..] max, int_xP[..] min)
  requires ((_C_49 : \at((if (\at(0,Here) <=
                               \at(((size_2 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(a,Here)) >=
                              \at(((size_2 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp1;
                             (((\at(0,Here) <= __framac_tmp1) &&
                                (__framac_tmp1 <=
                                  \at(((size_2 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             ((_C_50 : \at((((\offset_min(\at(max,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(max,Here)) >= \at(0,Here))) &&
                             true),Here)) &&
               (_C_51 : \at((((\offset_min(\at(min,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(min,Here)) >= \at(0,Here))) &&
                              true),Here))));
behavior default:
  ensures true;
behavior zero_size:
  assumes ((size_2 :> integer) == 0);
  assigns \nothing;
  ensures (_C_37 : ((_C_38 : (\at(max,Old) == \at(max,Old))) &&
                     (_C_39 : (\at(min,Old) == \at(min,Old)))));
behavior positive_size:
  assumes ((size_2 :> integer) > 0);
  assigns max.int_xM,
  min.int_xM;
  ensures (_C_40 : ((_C_41 : (\exists integer i_1;
                               (((0 <= i_1) &&
                                  (i_1 < (\at(size_2,Old) :> integer))) &&
                                 ((\at(a,Old) + i_1) == \at(max,Old).int_xM)))) &&
                     ((_C_43 : (\exists integer i_2;
                                 (((0 <= i_2) &&
                                    (i_2 < (\at(size_2,Old) :> integer))) &&
                                   ((\at(a,Old) + i_2) ==
                                     \at(min,Old).int_xM)))) &&
                       ((_C_45 : (\at(max,Old).int_xM.intM >=
                                   \at(min,Old).int_xM.intM)) &&
                         (_C_46 : (\forall integer i_3;
                                    (((0 <= i_3) &&
                                       (i_3 < (\at(size_2,Old) :> integer))) ==>
                                      ((\at(max,Old).int_xM.intM >=
                                         (\at(a,Old) + i_3).intM) &&
                                        ((\at(a,Old) + i_3).intM >=
                                          \at(min,Old).int_xM.intM)))))))));
{  
   (check (disjoint_behaviors : (! (((size_2 :> integer) == 0) &&
                                     ((size_2 :> integer) > 0)))));
   
   (check (complete_behaviors : (((size_2 :> integer) > 0) ||
                                  ((size_2 :> integer) == 0))));
   
   (var uint32 i);
   
   {  (if (_C_36 : (size_2 > (0 :> uint32))) then 
      {  (_C_3 : ((_C_2 : max.int_xM) = (_C_1 : (a + (0 :> int32)))));
         (_C_6 : ((_C_5 : min.int_xM) = (_C_4 : max.int_xM)));
         (_C_7 : (i = (1 :> uint32)));
         
         loop 
         behavior default:
           invariant (_C_13 : ((_C_14 : (1 <= (i :> integer))) &&
                                (_C_15 : (i <= size_2))));
         behavior default:
           invariant (_C_12 : (\exists integer j_0;
                                (((0 <= j_0) && (j_0 < (i :> integer))) &&
                                  ((a + j_0) == max.int_xM))));
         behavior default:
           invariant (_C_11 : (\exists integer j_1;
                                (((0 <= j_1) && (j_1 < (i :> integer))) &&
                                  ((a + j_1) == min.int_xM))));
         behavior default:
           invariant (_C_10 : (max.int_xM.intM >= min.int_xM.intM));
         behavior default:
           invariant (_C_9 : (\forall integer j_2;
                               (((0 <= j_2) && (j_2 < (i :> integer))) ==>
                                 ((max.int_xM.intM >= (a + j_2).intM) &&
                                   ((a + j_2).intM >= min.int_xM.intM)))));
         behavior default:
           
           assigns max.int_xM,
           min.int_xM;
         variant (_C_8 : ((size_2 :> integer) - (i :> integer)));
         while (true)
         {  
            {  (if (_C_16 : (i < size_2)) then () else 
               (goto while_0_break));
               
               {  (if (_C_32 : ((_C_31 : (_C_30 : max.int_xM).intM) <
                                 (_C_29 : (_C_28 : (a + i)).intM))) then 
                  (_C_27 : ((_C_26 : max.int_xM) = (_C_25 : (a + i)))) else 
                  (if (_C_24 : ((_C_23 : (_C_22 : min.int_xM).intM) >
                                 (_C_21 : (_C_20 : (a + i)).intM))) then 
                  (_C_19 : ((_C_18 : min.int_xM) = (_C_17 : (a + i)))) else ()))
               };
               (_C_35 : (i = (_C_34 : ((_C_33 : (i + (1 :> uint32))) :> uint32))))
            }
         };
         (while_0_break : ())
      } else ());
      
      (return ())
   }
}
